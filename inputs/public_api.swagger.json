{
  "swagger": "2.0",
  "info": {
    "title": "Turnkey Public API",
    "version": "1.0",
    "contact": {
      "name": "Turnkey Engineering",
      "url": "https://turnkey.io/contact",
      "email": "eng@turnkey.io"
    }
  },
  "tags": [
    {
      "name": "PublicApiService"
    }
  ],
  "host": "coordinator-beta.turnkey.io",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/public/v1/query/get_activity": {
      "post": {
        "summary": "Get Activity",
        "description": "Get details about an Activity",
        "operationId": "PublicApiService_GetActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivityRequest"
            }
          }
        ],
        "tags": ["Activities"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_activity --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"activityId\": \"\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/get_organization": {
      "post": {
        "summary": "Get Organization",
        "description": "Get details about an Organization",
        "operationId": "PublicApiService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_organization --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/get_policy": {
      "post": {
        "summary": "Get Policy",
        "description": "Get details about a Policy",
        "operationId": "PublicApiService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPolicyRequest"
            }
          }
        ],
        "tags": ["Policies"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_policy --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"policyId\": \"\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/get_private_key": {
      "post": {
        "summary": "Get Private Key",
        "description": "Get details about a Private Key",
        "operationId": "PublicApiService_GetPrivateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_private_key --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"privateKeyId\": \"'\"$PRIVATE_KEY_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/get_user": {
      "post": {
        "summary": "Get User",
        "description": "Get details about a User",
        "operationId": "PublicApiService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUserRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_user --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"userId\": \"\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/list_activities": {
      "post": {
        "summary": "List Activities",
        "description": "List all Activities within an Organization",
        "operationId": "PublicApiService_GetActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActivitiesResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivitiesRequest"
            }
          }
        ],
        "tags": ["Activities"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/list_activities --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/list_policies": {
      "post": {
        "summary": "List Policies",
        "description": "List all Policies within an Organization",
        "operationId": "PublicApiService_GetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesRequest"
            }
          }
        ],
        "tags": ["Policies"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/list_policies --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/list_private_keys": {
      "post": {
        "summary": "List Private Keys",
        "description": "List all Private Keys within an Organization",
        "operationId": "PublicApiService_GetPrivateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeysResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/list_private_keys --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/list_users": {
      "post": {
        "summary": "List Users",
        "description": "List all Users within an Organization",
        "operationId": "PublicApiService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUsersRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/list_users --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/query/whoami": {
      "post": {
        "summary": "Who am I?",
        "description": "Get basic information about your current API user and your organization",
        "operationId": "PublicApiService_GetWhoami",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/whoami --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/approve_activity": {
      "post": {
        "summary": "Approve Activity",
        "description": "Approve an Activity",
        "operationId": "PublicApiService_ApproveActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ApproveActivityRequest"
            }
          }
        ],
        "tags": ["Activities"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/approve_activity --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_APPROVE_ACTIVITY\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"fingerprint\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_api_keys": {
      "post": {
        "summary": "Create API Keys",
        "description": "Add api keys to an existing User",
        "operationId": "PublicApiService_CreateApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiKeysRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_api_keys --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"apiKeys\": [{\n\t\t\t\"apiKeyName\": \"\",\n\t\t\t\"publicKey\": \"\"\n\t\t}],\n\t\t\"userId\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_api_only_users": {
      "post": {
        "summary": "Create API-only Users",
        "description": "Create API-only Users in an existing Organization",
        "operationId": "PublicApiService_CreateApiOnlyUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiOnlyUsersRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_api_only_users --body '{\n\t\"timestampMs\": \"$TIMESTAMP_IN_MILLISECONDS\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\",\n\t\"organizationId\": \"$ORGANIZATION_ID\",\n\t\"parameters\": {\n\t\t\"api_only_users\": [{\n\t\t\t\"userName\": \"\",\n\t\t\t\"userEmail\": \"\",\n\t\t\t\"userTags\": \"[]\", \n\t\t\t\"apiKeys\": [\n\t\t\t\t{\"publicKey\": \"public-key\",\"apiKeyName\": \"test\"}\n\t\t\t]}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_authenticators": {
      "post": {
        "summary": "Create Authenticators",
        "description": "Create Authenticators to authenticate requests to Turnkey",
        "operationId": "PublicApiService_CreateAuthenticators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAuthenticatorsRequest"
            }
          }
        ],
        "tags": ["Authenticators"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_authenticators --body '{\n\t\"type\": \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\",\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"userId\": \"\",\n\t\t\"authenticators\": [\n\t\t\t{\n\t\t\t\t\"authenticatorName\": \"\",\n\t\t\t\t\"challenge\": \"\",\n\t\t\t\t\"attestation\": {\n\t\t\t\t\t\"credentialId\": \"\",\n\t\t\t\t\t\"clientDataJson\": \"\",\n\t\t\t\t\t\"attestationObject\": \"\",\n\t\t\t\t\t\"transports\": []\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_invitations": {
      "post": {
        "summary": "Create Invitations",
        "description": "Create Invitations to join an existing Organization",
        "operationId": "PublicApiService_CreateInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateInvitationsRequest"
            }
          }
        ],
        "tags": ["Organizations"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_invitations --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_INVITATIONS\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"invitations\": [{\n\t\t\t\"userName\": \"\",\n\t\t\t\"userEmail\": \"\",\n\t\t\t\"receiverUserTags\": \"\",\n\t\t\t\"accessType\": \"\",\n\t\t\t\"senderUserId\": \"\"\n\t\t}]\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_policy": {
      "post": {
        "summary": "Create Policy",
        "description": "Create a new Policy",
        "operationId": "PublicApiService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_policy --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_POLICY\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"policyName\": \"\",\n\t\t\"effect\": \"\",\n\t\t\"notes\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_private_keys": {
      "post": {
        "summary": "Create Private Keys",
        "description": "Create new Private Keys",
        "operationId": "PublicApiService_CreatePrivateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePrivateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_private_keys --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"privateKeys\": [{\n\t\t\t\"privateKeyName\": \"\",\n\t\t\t\"curve\": \"\",\n\t\t\t\"privateKeyTags\": \"\",\n\t\t\t\"addressFormats\": \"\"\n\t\t}]\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_sub_organization": {
      "post": {
        "summary": "Create Sub-Organization",
        "description": "Create a new Sub-Organization",
        "operationId": "PublicApiService_CreateSubOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSubOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_sub_organization --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"name\": \"\",\n\t\t\"rootAuthenticator\": {\n\t\t\t\"authenticatorName\": \"\",\n\t\t\t\"challenge\":\"\",\n\t\t\t\"attestation\":{\n\t\t\t\t\"credentialId\":\"\",\n\t\t\t\t\"clientDataJson\":\"\",\n\t\t\t\t\"attestationObject\":\"\",\n\t\t\t\t\"transports\":[],\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/create_users": {
      "post": {
        "summary": "Create Users",
        "description": "Create Users in an existing Organization",
        "operationId": "PublicApiService_CreateUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUsersRequest"
            }
          }
        ],
        "tags": ["Users"],
        "deprecated": true,
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/create_users --body '{\n\t\"timestampMs\": \"$TIMESTAMP_IN_MILLISECONDS\",\n\t\"type\": \"ACTIVITY_TYPE_CREATE_USERS\",\n\t\"organizationId\": \"$ORGANIZATION_ID\",\n\t\"parameters\": {\n\t\t\"users\": [{\n\t\t\t\"userName\": \"\",\n\t\t\t\"userEmail\": \"\",\n\t\t\t\"accessType\": \"ACCESS_TYPE_API\",\n\t\t\t\"userTags\": \"[]\", \n\t\t\t\"apiKeys\": [\n\t\t\t\t{\"publicKey\": \"public-key\",\"apiKeyName\": \"test\"}\n\t\t\t]}]}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/delete_api_keys": {
      "post": {
        "summary": "Delete API Keys",
        "description": "Remove api keys from a User",
        "operationId": "PublicApiService_DeleteApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteApiKeysRequest"
            }
          }
        ],
        "tags": ["Users"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/delete_api_keys --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_DELETE_API_KEYS\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"apiKeyIds\": [],\n\t\t\"userId\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/delete_invitations": {
      "post": {
        "summary": "Delete Invitation",
        "description": "Delete an existing Invitation",
        "operationId": "PublicApiService_DeleteInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteInvitationRequest"
            }
          }
        ],
        "tags": ["Organizations"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/delete_invitation --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_DELETE_INVITATION\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"invitationId\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/delete_policy": {
      "post": {
        "summary": "Delete Policy",
        "description": "Delete an existing Policy",
        "operationId": "PublicApiService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/delete_policy --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_DELETE_POLICY\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"policyId\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/reject_activity": {
      "post": {
        "summary": "Reject Activity",
        "description": "Reject an Activity",
        "operationId": "PublicApiService_RejectActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RejectActivityRequest"
            }
          }
        ],
        "tags": ["Activities"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/reject_activity --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_REJECT_ACTIVITY\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"fingerprint\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/sign_raw_payload": {
      "post": {
        "summary": "Sign Raw Payload",
        "description": "Sign a raw payload with a Private Key",
        "operationId": "PublicApiService_SignRawPayload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignRawPayloadRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/sign_raw_payload --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"privateKeyId\": \"'\"$PRIVATE_KEY_ID\"'\",\n\t\t\"encoding\": \"PAYLOAD_ENCODING_TEXT_UTF8\",\n\t\t\"payload\": \"\",\n\t\t\"hashFunction\": \"HASH_FUNCTION_KECCAK256\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/sign_transaction": {
      "post": {
        "summary": "Sign Transaction",
        "description": "Sign a transaction with a Private Key",
        "operationId": "PublicApiService_SignTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignTransactionRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/sign_transaction --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_SIGN_TRANSACTION\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"privateKeyId\": \"'\"$PRIVATE_KEY_ID\"'\",\n\t\t\"unsignedTransaction\": \"\",\n\t\t\"type\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/update_private_key_tag": {
      "post": {
        "summary": "Update Private Key Tag",
        "description": "Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.",
        "operationId": "PublicApiService_UpdatePrivateKeyTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePrivateKeyTagRequest"
            }
          }
        ],
        "tags": ["Private Key Tags"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/private_key_tags/update --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"privateKeyTagId\": \"'\"$PRIVATE_KEY_TAG_ID\"'\",\n\t\t\"privateKeyTagName\": \"\",\n\t\t\"addPrivateKeyTagIds\": \"\",\n\t\t\"removePrivateKeyTagIds\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/update_root_quorum": {
      "post": {
        "summary": "Set the root quorum",
        "description": "Set the threshold and members of the root quorum. This must be approved by the current root quorum.",
        "operationId": "PublicApiService_UpdateRootQuorum",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRootQuorumRequest"
            }
          }
        ],
        "tags": ["Root Quorum"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/update_root_quorum --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"UPDATE_ROOT_QUORUM\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"userIds\": \"'\"$USER_IDS\"'\",\n\t\t\"threshold\": $THRESHOLD,\n\t\t\"type\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/public/v1/submit/update_user_tag": {
      "post": {
        "summary": "Update User Tag",
        "description": "Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.",
        "operationId": "PublicApiService_UpdateUserTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserTagRequest"
            }
          }
        ],
        "tags": ["User Tags"],
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/submit/user_tags/update --body '{\n\t\"timestampMs\": \"'\"$(date +%s)\"'000\",\n\t\"type\": \"ACTIVITY_TYPE_UPDATE_USER_TAG\",\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"parameters\": {\n\t\t\"userTagId\": \"'\"$USER_TAG_ID\"'\",\n\t\t\"userTagName\": \"\",\n\t\t\"addUserIds\": \"\",\n\t\t\"removeUserIds\": \"\"\n\t}\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    },
    "/tkhq/api/v1/noop-codegen-anchor": {
      "post": {
        "summary": "This route does nothing and does not need an implementation, but please don't remove it.\nIt's used at compile time for generating extra OpenAPI/TypeScript types\nthat are not directly referenced in requests.",
        "operationId": "PublicApiService_NOOPCodegenAnchor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NOOPCodegenAnchorResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": ["PublicApiService"]
      }
    },
    "/tkhq/public/v1/query/get_private_key": {
      "post": {
        "summary": "Get Private Key",
        "description": "Get details about a Private Key",
        "operationId": "PublicApiService_GetPrivateKeyBackwardsCompat",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"],
        "deprecated": true,
        "x-readme": {
          "code-samples": [
            {
              "code": "turnkey request --host coordinator-beta.turnkey.io --path /public/v1/query/get_private_key --body '{\n\t\"organizationId\": \"'\"$ORGANIZATION_ID\"'\",\n\t\"privateKeyId\": \"'\"$PRIVATE_KEY_ID\"'\"\n}'",
              "install": "brew tap tkhq/tap \u0026\u0026 brew install turnkey",
              "language": "curl",
              "name": "Turnkey CLI"
            }
          ]
        }
      }
    }
  },
  "definitions": {
    "datav1Tag": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "Unique identifier for a given Tag."
        },
        "tagName": {
          "type": "string",
          "description": "Human-readable name for a Tag."
        },
        "tagType": {
          "$ref": "#/definitions/v1TagType"
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "required": ["tagId", "tagName", "tagType", "createdAt", "updatedAt"]
    },
    "externaldatav1AccessType": {
      "type": "string",
      "enum": ["ACCESS_TYPE_WEB", "ACCESS_TYPE_API", "ACCESS_TYPE_ALL"]
    },
    "externaldatav1Address": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/externaldatav1AddressFormat"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "externaldatav1AddressFormat": {
      "type": "string",
      "enum": [
        "ADDRESS_FORMAT_UNCOMPRESSED",
        "ADDRESS_FORMAT_COMPRESSED",
        "ADDRESS_FORMAT_ETHEREUM"
      ],
      "description": " - ADDRESS_FORMAT_UNCOMPRESSED: 04\u003cX_COORDINATE\u003e\u003cY_COORDINATE\u003e\n - ADDRESS_FORMAT_COMPRESSED: 02 or 03, followed by the X coordinate\n - ADDRESS_FORMAT_ETHEREUM: Your standard Ethereum address (0x...). We apply EIP55 casing."
    },
    "externaldatav1AuthenticatorTransport": {
      "type": "string",
      "enum": [
        "AUTHENTICATOR_TRANSPORT_BLE",
        "AUTHENTICATOR_TRANSPORT_INTERNAL",
        "AUTHENTICATOR_TRANSPORT_NFC",
        "AUTHENTICATOR_TRANSPORT_USB",
        "AUTHENTICATOR_TRANSPORT_HYBRID"
      ]
    },
    "externaldatav1Curve": {
      "type": "string",
      "enum": ["CURVE_SECP256K1", "CURVE_ED25519"],
      "description": "Cryptographic Curve used to generate a given Private Key."
    },
    "externaldatav1Effect": {
      "type": "string",
      "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
    },
    "externaldatav1Operator": {
      "type": "string",
      "enum": [
        "OPERATOR_EQUAL",
        "OPERATOR_MORE_THAN",
        "OPERATOR_MORE_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL",
        "OPERATOR_CONTAINS",
        "OPERATOR_NOT_EQUAL",
        "OPERATOR_IN",
        "OPERATOR_NOT_IN",
        "OPERATOR_CONTAINS_ONE",
        "OPERATOR_CONTAINS_ALL"
      ],
      "description": "Logical operators."
    },
    "externaldatav1Selector": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The resource being referenced within a policy (e.g., user.tags or activities.type)."
        },
        "operator": {
          "$ref": "#/definitions/externaldatav1Operator"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The specific parameter from the subject being referenced, like a specific user ID."
        }
      },
      "required": ["subject", "operator", "targets"]
    },
    "immutableactivityv1AccessType": {
      "type": "string",
      "enum": ["ACCESS_TYPE_WEB", "ACCESS_TYPE_API", "ACCESS_TYPE_ALL"]
    },
    "immutableactivityv1AddressFormat": {
      "type": "string",
      "enum": [
        "ADDRESS_FORMAT_UNCOMPRESSED",
        "ADDRESS_FORMAT_COMPRESSED",
        "ADDRESS_FORMAT_ETHEREUM"
      ],
      "description": " - ADDRESS_FORMAT_UNCOMPRESSED: 04\u003cX_COORDINATE\u003e\u003cY_COORDINATE\u003e\n - ADDRESS_FORMAT_COMPRESSED: 02 or 03, followed by the X coordinate\n - ADDRESS_FORMAT_ETHEREUM: Your standard Ethereum address (0x...). We apply EIP55 casing."
    },
    "immutableactivityv1Curve": {
      "type": "string",
      "enum": ["CURVE_SECP256K1", "CURVE_ED25519"],
      "description": "Cryptographic Curve used to generate a given Private Key."
    },
    "immutableactivityv1Effect": {
      "type": "string",
      "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
    },
    "immutableactivityv1Operator": {
      "type": "string",
      "enum": [
        "OPERATOR_EQUAL",
        "OPERATOR_MORE_THAN",
        "OPERATOR_MORE_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL",
        "OPERATOR_CONTAINS",
        "OPERATOR_NOT_EQUAL",
        "OPERATOR_IN",
        "OPERATOR_NOT_IN",
        "OPERATOR_CONTAINS_ONE",
        "OPERATOR_CONTAINS_ALL"
      ]
    },
    "immutableactivityv1Selector": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/immutableactivityv1Operator"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "immutableactivityv1TransactionType": {
      "type": "string",
      "enum": ["TRANSACTION_TYPE_ETHEREUM"],
      "title": "- TRANSACTION_TYPE_ETHEREUM: Unsigned Ethereum transaction, RLP-encoded and hex-encoded"
    },
    "immutablewebauthnv1AuthenticatorTransport": {
      "type": "string",
      "enum": [
        "AUTHENTICATOR_TRANSPORT_BLE",
        "AUTHENTICATOR_TRANSPORT_INTERNAL",
        "AUTHENTICATOR_TRANSPORT_NFC",
        "AUTHENTICATOR_TRANSPORT_USB",
        "AUTHENTICATOR_TRANSPORT_HYBRID"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AcceptInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "authenticator": {
          "$ref": "#/definitions/v1AuthenticatorParams"
        }
      },
      "required": ["invitationId", "userId", "authenticator"]
    },
    "v1AcceptInvitationIntentV2": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "authenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2"
        }
      },
      "required": ["invitationId", "userId", "authenticator"]
    },
    "v1AcceptInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["invitationId", "userId"]
    },
    "v1ActivateBillingTierIntent": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "The product that the customer wants to subscribe to.",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["productId"]
    },
    "v1ActivateBillingTierResult": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "The id of the product being subscribed to."
        }
      },
      "required": ["productId"]
    },
    "v1Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "status": {
          "$ref": "#/definitions/v1ActivityStatus"
        },
        "type": {
          "$ref": "#/definitions/v1ActivityType"
        },
        "intent": {
          "$ref": "#/definitions/v1Intent"
        },
        "result": {
          "$ref": "#/definitions/v1Result"
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Vote"
          },
          "description": "A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata."
        },
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action."
        },
        "canApprove": {
          "type": "boolean"
        },
        "canReject": {
          "type": "boolean"
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "description": "An action that can that can be taken within the Turnkey infrastructure.",
      "required": [
        "id",
        "organizationId",
        "status",
        "type",
        "intent",
        "result",
        "votes",
        "fingerprint",
        "canApprove",
        "canReject",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1ActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/v1Activity"
        }
      },
      "required": ["activity"]
    },
    "v1ActivityStatus": {
      "type": "string",
      "enum": [
        "ACTIVITY_STATUS_CREATED",
        "ACTIVITY_STATUS_PENDING",
        "ACTIVITY_STATUS_COMPLETED",
        "ACTIVITY_STATUS_FAILED",
        "ACTIVITY_STATUS_CONSENSUS_NEEDED",
        "ACTIVITY_STATUS_REJECTED"
      ],
      "description": "The current processing status of an Activity."
    },
    "v1ActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_CREATE_API_KEYS",
        "ACTIVITY_TYPE_CREATE_USERS",
        "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS",
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD",
        "ACTIVITY_TYPE_CREATE_INVITATIONS",
        "ACTIVITY_TYPE_ACCEPT_INVITATION",
        "ACTIVITY_TYPE_CREATE_POLICY",
        "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY",
        "ACTIVITY_TYPE_DELETE_USERS",
        "ACTIVITY_TYPE_DELETE_API_KEYS",
        "ACTIVITY_TYPE_DELETE_INVITATION",
        "ACTIVITY_TYPE_DELETE_ORGANIZATION",
        "ACTIVITY_TYPE_DELETE_POLICY",
        "ACTIVITY_TYPE_CREATE_USER_TAG",
        "ACTIVITY_TYPE_DELETE_USER_TAGS",
        "ACTIVITY_TYPE_CREATE_ORGANIZATION",
        "ACTIVITY_TYPE_SIGN_TRANSACTION",
        "ACTIVITY_TYPE_APPROVE_ACTIVITY",
        "ACTIVITY_TYPE_REJECT_ACTIVITY",
        "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
        "ACTIVITY_TYPE_CREATE_AUTHENTICATORS",
        "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
        "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
        "ACTIVITY_TYPE_SET_PAYMENT_METHOD",
        "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER",
        "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD",
        "ACTIVITY_TYPE_CREATE_POLICY_V2",
        "ACTIVITY_TYPE_CREATE_POLICY_V3",
        "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
        "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
        "ACTIVITY_TYPE_UPDATE_USER_TAG",
        "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
        "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
        "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2",
        "ACTIVITY_TYPE_CREATE_USERS_V2",
        "ACTIVITY_TYPE_ACCEPT_INVITATION_V2",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2"
      ],
      "description": "Type of Activity, such as Add User, or Sign Transaction."
    },
    "v1ApiKey": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/v1Credential"
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for a given API Key."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Human-readable name for an API Key."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "required": [
        "credential",
        "apiKeyId",
        "apiKeyName",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1ApiKeyParams": {
      "type": "object",
      "properties": {
        "apiKeyName": {
          "type": "string",
          "description": "Human-readable name for an API Key.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions.",
          "title": "@inject_tag: validate:\"hexadecimal,len=66\""
        }
      },
      "required": ["apiKeyName", "publicKey"]
    },
    "v1ApiOnlyUserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "The name of the new API-only User.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "userEmail": {
          "type": "string",
          "description": "The email address for this API-only User (optional).",
          "title": "@inject_tag: validate:\"omitempty,email,tk_email\""
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the new API-only User.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKeyParams"
          },
          "description": "A list of API Key parameters.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["userName", "userTags", "apiKeys"]
    },
    "v1ApproveActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action.",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["fingerprint"]
    },
    "v1ApproveActivityRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_APPROVE_ACTIVITY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ApproveActivityIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1Attestation": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "description": "The cbor encoded then base64 url encoded id of the credential.",
          "title": "@inject_tag: validate:\"required,max=256\""
        },
        "clientDataJson": {
          "type": "string",
          "description": "A base64 url encoded payload containing metadata about the signing context and the challenge.",
          "title": "@inject_tag: validate:\"required\""
        },
        "attestationObject": {
          "type": "string",
          "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.",
          "title": "@inject_tag: validate:\"required\""
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/immutablewebauthnv1AuthenticatorTransport"
          },
          "description": "The type of authenticator transports."
        }
      },
      "required": [
        "credentialId",
        "clientDataJson",
        "attestationObject",
        "transports"
      ]
    },
    "v1Authenticator": {
      "type": "object",
      "properties": {
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/externaldatav1AuthenticatorTransport"
          },
          "description": "Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE)."
        },
        "attestationType": {
          "type": "string"
        },
        "aaguid": {
          "type": "string",
          "description": "Identifier indicating the type of the Security Key."
        },
        "credentialId": {
          "type": "string",
          "description": "Unique identifier for a WebAuthn credential."
        },
        "model": {
          "type": "string",
          "description": "The type of Authenticator device."
        },
        "credential": {
          "$ref": "#/definitions/v1Credential"
        },
        "authenticatorId": {
          "type": "string",
          "description": "Unique identifier for a given Authenticator."
        },
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "required": [
        "transports",
        "attestationType",
        "aaguid",
        "credentialId",
        "model",
        "credential",
        "authenticatorId",
        "authenticatorName",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1AuthenticatorAttestationResponse": {
      "type": "object",
      "properties": {
        "clientDataJson": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "attestationObject": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/immutablewebauthnv1AuthenticatorTransport"
          }
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        }
      },
      "required": ["clientDataJson", "attestationObject"]
    },
    "v1AuthenticatorParams": {
      "type": "object",
      "properties": {
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "attestation": {
          "$ref": "#/definitions/v1PublicKeyCredentialWithAttestation"
        },
        "challenge": {
          "type": "string",
          "description": "Challenge presented for authentication purposes.",
          "title": "@inject_tag: validate:\"required,max=256\""
        }
      },
      "required": ["authenticatorName", "userId", "attestation", "challenge"]
    },
    "v1AuthenticatorParamsV2": {
      "type": "object",
      "properties": {
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "challenge": {
          "type": "string",
          "description": "Challenge presented for authentication purposes.",
          "title": "@inject_tag: validate:\"required,max=256\""
        },
        "attestation": {
          "$ref": "#/definitions/v1Attestation"
        }
      },
      "required": ["authenticatorName", "challenge", "attestation"]
    },
    "v1CreateApiKeysIntent": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKeyParams"
          },
          "description": "A list of API Keys.",
          "title": "@inject_tag: validate:\"dive,required\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["apiKeys", "userId"]
    },
    "v1CreateApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_API_KEYS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateApiKeysIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs."
        }
      },
      "required": ["apiKeyIds"]
    },
    "v1CreateApiOnlyUsersIntent": {
      "type": "object",
      "properties": {
        "apiOnlyUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiOnlyUserParams"
          },
          "description": "A list of API-only Users to create.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["apiOnlyUsers"]
    },
    "v1CreateApiOnlyUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_API_ONLY_USERS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateApiOnlyUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API-only User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1CreateAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorParams"
          },
          "description": "A list of Authenticators.",
          "title": "@inject_tag: validate:\"dive,required\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["authenticators", "userId"]
    },
    "v1CreateAuthenticatorsIntentV2": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticators.",
          "title": "@inject_tag: validate:\"dive,required\""
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["authenticators", "userId"]
    },
    "v1CreateAuthenticatorsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Authenticator IDs."
        }
      },
      "required": ["authenticatorIds"]
    },
    "v1CreateInvitationsIntent": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvitationParams"
          },
          "description": "A list of Invitations.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["invitations"]
    },
    "v1CreateInvitationsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_INVITATIONS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateInvitationsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateInvitationsResult": {
      "type": "object",
      "properties": {
        "invitationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Invitation IDs"
        }
      },
      "required": ["invitationIds"]
    },
    "v1CreateOrganizationIntent": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization.",
          "title": "@inject_tag: validate:\"required,tk_label_length\""
        },
        "rootEmail": {
          "type": "string",
          "description": "The root user's email address.",
          "title": "@inject_tag: validate:\"required,email,tk_email\""
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParams"
        },
        "rootUserId": {
          "type": "string",
          "description": "Unique identifier for the root user object.",
          "title": "@inject_tag: validate:\"uuid\""
        }
      },
      "required": ["organizationName", "rootEmail", "rootAuthenticator"]
    },
    "v1CreateOrganizationIntentV2": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization.",
          "title": "@inject_tag: validate:\"required,tk_label_length\""
        },
        "rootEmail": {
          "type": "string",
          "description": "The root user's email address.",
          "title": "@inject_tag: validate:\"required,email,tk_email\""
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2"
        },
        "rootUserId": {
          "type": "string",
          "description": "Unique identifier for the root user object.",
          "title": "@inject_tag: validate:\"uuid\""
        }
      },
      "required": ["organizationName", "rootEmail", "rootAuthenticator"]
    },
    "v1CreateOrganizationResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1CreatePolicyIntent": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy.",
          "title": "@inject_tag: validate:\"required,tk_label_length\""
        },
        "selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/immutableactivityv1Selector"
          },
          "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        },
        "effect": {
          "$ref": "#/definitions/immutableactivityv1Effect"
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "selectors", "effect"]
    },
    "v1CreatePolicyIntentV2": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy.",
          "title": "@inject_tag: validate:\"required,tk_label_length\""
        },
        "selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SelectorV2"
          },
          "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        },
        "effect": {
          "$ref": "#/definitions/immutableactivityv1Effect"
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "selectors", "effect"]
    },
    "v1CreatePolicyIntentV3": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy.",
          "title": "@inject_tag: validate:\"required,tk_label,tk_label_length\""
        },
        "effect": {
          "$ref": "#/definitions/immutableactivityv1Effect"
        },
        "condition": {
          "type": "string",
          "description": "The condition expression that triggers the Effect"
        },
        "consensus": {
          "type": "string",
          "description": "The consensus expression that triggers the Effect"
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "effect"]
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_POLICY_V3"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePolicyIntentV3"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1CreatePrivateKeyTagIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagName": {
          "type": "string",
          "description": "Human-readable name for a Private Key Tag.",
          "title": "@inject_tag: validate:\"required,tk_label,tk_label_length\""
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["privateKeyTagName", "privateKeyIds"]
    },
    "v1CreatePrivateKeyTagResult": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag."
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyTagId", "privateKeyIds"]
    },
    "v1CreatePrivateKeysIntent": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PrivateKeyParams"
          },
          "description": "A list of Private Keys.",
          "title": "@inject_tag: validate:\"dive,required\""
        }
      },
      "required": ["privateKeys"]
    },
    "v1CreatePrivateKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_PRIVATE_KEYS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePrivateKeysIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePrivateKeysResult": {
      "type": "object",
      "properties": {
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyIds"]
    },
    "v1CreateSubOrganizationIntent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for this sub-organization",
          "title": "@inject_tag: validate:\"omitempty,tk_label,tk_label_length\""
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2"
        }
      },
      "required": ["name", "rootAuthenticator"]
    },
    "v1CreateSubOrganizationIntentV2": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization",
          "title": "@inject_tag: validate:\"omitempty,tk_label,tk_label_length\""
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RootUserParams"
          },
          "description": "Root users to create within this sub-organization",
          "title": "@inject_tag: validate:\"required\""
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateSubOrganizationResult": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateUserTagIntent": {
      "type": "object",
      "properties": {
        "userTagName": {
          "type": "string",
          "description": "Human-readable name for a User Tag.",
          "title": "@inject_tag: validate:\"required,tk_label,tk_label_length\""
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["userTagName", "userIds"]
    },
    "v1CreateUserTagResult": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userTagId", "userIds"]
    },
    "v1CreateUsersIntent": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UserParams"
          },
          "description": "A list of Users.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["users"]
    },
    "v1CreateUsersIntentV2": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UserParamsV2"
          },
          "description": "A list of Users.",
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["users"]
    },
    "v1CreateUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_USERS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateUsersIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1CredPropsAuthenticationExtensionsClientOutputs": {
      "type": "object",
      "properties": {
        "rk": {
          "type": "boolean"
        }
      },
      "required": ["rk"]
    },
    "v1Credential": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "type": {
          "$ref": "#/definitions/v1CredentialType"
        }
      },
      "required": ["publicKey", "type"]
    },
    "v1CredentialType": {
      "type": "string",
      "enum": [
        "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR",
        "CREDENTIAL_TYPE_API_KEY_P256"
      ]
    },
    "v1DeleteApiKeysIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs.",
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userId", "apiKeyIds"]
    },
    "v1DeleteApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_API_KEYS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteApiKeysIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs."
        }
      },
      "required": ["apiKeyIds"]
    },
    "v1DeleteAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Authenticator IDs.",
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userId", "authenticatorIds"]
    },
    "v1DeleteAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifier for a given Authenticator."
        }
      },
      "required": ["authenticatorIds"]
    },
    "v1DeleteInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["invitationId"]
    },
    "v1DeleteInvitationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_INVITATION"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteInvitationIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation."
        }
      },
      "required": ["invitationId"]
    },
    "v1DeleteOrganizationIntent": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["organizationId"]
    },
    "v1DeleteOrganizationResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1DeletePaymentMethodIntent": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "description": "The payment method that the customer wants to remove."
        }
      },
      "required": ["paymentMethodId"]
    },
    "v1DeletePaymentMethodResult": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "description": "The payment method that was removed."
        }
      },
      "required": ["paymentMethodId"]
    },
    "v1DeletePolicyIntent": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["policyId"]
    },
    "v1DeletePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_POLICY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeletePolicyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeletePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1DeletePrivateKeyTagsIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs.",
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["privateKeyTagIds"]
    },
    "v1DeletePrivateKeyTagsResult": {
      "type": "object",
      "properties": {
        "privateKeyTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyTagIds", "privateKeyIds"]
    },
    "v1DeleteUserTagsIntent": {
      "type": "object",
      "properties": {
        "userTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs.",
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userTagIds"]
    },
    "v1DeleteUserTagsResult": {
      "type": "object",
      "properties": {
        "userTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userTagIds", "userIds"]
    },
    "v1DeleteUsersIntent": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs.",
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userIds"]
    },
    "v1DeleteUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1DisablePrivateKeyIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["privateKeyId"]
    },
    "v1DisablePrivateKeyResult": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        }
      },
      "required": ["privateKeyId"]
    },
    "v1GetActivitiesRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "filterByStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ActivityStatus"
          },
          "description": "Array of Activity Statuses filtering which Activities will be listed in the response."
        },
        "paginationOptions": {
          "$ref": "#/definitions/v1Pagination"
        }
      },
      "required": ["organizationId"]
    },
    "v1GetActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Activity"
          },
          "description": "A list of Activities."
        }
      },
      "required": ["activities"]
    },
    "v1GetActivityRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "activityId": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        }
      },
      "required": ["organizationId", "activityId"]
    },
    "v1GetOrganizationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organizationData": {
          "$ref": "#/definitions/v1OrganizationData"
        }
      },
      "required": ["organizationData"]
    },
    "v1GetPoliciesRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          },
          "description": "A list of Policies."
        }
      },
      "required": ["policies"]
    },
    "v1GetPolicyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["organizationId", "policyId"]
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      },
      "required": ["policy"]
    },
    "v1GetPrivateKeyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        }
      },
      "required": ["organizationId", "privateKeyId"]
    },
    "v1GetPrivateKeyResponse": {
      "type": "object",
      "properties": {
        "privateKey": {
          "$ref": "#/definitions/v1PrivateKey"
        }
      },
      "required": ["privateKey"]
    },
    "v1GetPrivateKeysRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetPrivateKeysResponse": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PrivateKey"
          },
          "description": "A list of Private Keys."
        }
      },
      "required": ["privateKeys"]
    },
    "v1GetUserRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["organizationId", "userId"]
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      },
      "required": ["user"]
    },
    "v1GetUsersRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "description": "A list of Users."
        }
      },
      "required": ["users"]
    },
    "v1GetWhoamiRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetWhoamiResponse": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "username": {
          "type": "string",
          "description": "Human-readable name for a User."
        }
      },
      "required": ["organizationId", "organizationName", "userId", "username"]
    },
    "v1HashFunction": {
      "type": "string",
      "enum": [
        "HASH_FUNCTION_NO_OP",
        "HASH_FUNCTION_SHA256",
        "HASH_FUNCTION_KECCAK256",
        "HASH_FUNCTION_NOT_APPLICABLE"
      ],
      "description": " - HASH_FUNCTION_UNSPECIFIED: Default value if a hash function is not set explicitly.\n - HASH_FUNCTION_NO_OP: No-op function. Useful if you want to pass raw digests to sign (ECDSA-only)\n - HASH_FUNCTION_SHA256: Standard SHA-256. Used in the Bitcoin ecosystem.\n - HASH_FUNCTION_KECCAK256: Keccak-256 (not the same as NIST SHA-3!).\nThis is the hash function used in the Ethereum ecosystem.\n - HASH_FUNCTION_NOT_APPLICABLE: Callers must use this enum value when signing with ed25519 keys.\nThis is because, unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032)."
    },
    "v1Intent": {
      "type": "object",
      "properties": {
        "createOrganizationIntent": {
          "$ref": "#/definitions/v1CreateOrganizationIntent"
        },
        "createAuthenticatorsIntent": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntent"
        },
        "createUsersIntent": {
          "$ref": "#/definitions/v1CreateUsersIntent"
        },
        "createPrivateKeysIntent": {
          "$ref": "#/definitions/v1CreatePrivateKeysIntent"
        },
        "signRawPayloadIntent": {
          "$ref": "#/definitions/v1SignRawPayloadIntent"
        },
        "createInvitationsIntent": {
          "$ref": "#/definitions/v1CreateInvitationsIntent"
        },
        "acceptInvitationIntent": {
          "$ref": "#/definitions/v1AcceptInvitationIntent"
        },
        "createPolicyIntent": {
          "$ref": "#/definitions/v1CreatePolicyIntent"
        },
        "disablePrivateKeyIntent": {
          "$ref": "#/definitions/v1DisablePrivateKeyIntent"
        },
        "deleteUsersIntent": {
          "$ref": "#/definitions/v1DeleteUsersIntent"
        },
        "deleteAuthenticatorsIntent": {
          "$ref": "#/definitions/v1DeleteAuthenticatorsIntent"
        },
        "deleteInvitationIntent": {
          "$ref": "#/definitions/v1DeleteInvitationIntent"
        },
        "deleteOrganizationIntent": {
          "$ref": "#/definitions/v1DeleteOrganizationIntent"
        },
        "deletePolicyIntent": {
          "$ref": "#/definitions/v1DeletePolicyIntent"
        },
        "createUserTagIntent": {
          "$ref": "#/definitions/v1CreateUserTagIntent"
        },
        "deleteUserTagsIntent": {
          "$ref": "#/definitions/v1DeleteUserTagsIntent"
        },
        "signTransactionIntent": {
          "$ref": "#/definitions/v1SignTransactionIntent"
        },
        "createApiKeysIntent": {
          "$ref": "#/definitions/v1CreateApiKeysIntent"
        },
        "deleteApiKeysIntent": {
          "$ref": "#/definitions/v1DeleteApiKeysIntent"
        },
        "approveActivityIntent": {
          "$ref": "#/definitions/v1ApproveActivityIntent"
        },
        "rejectActivityIntent": {
          "$ref": "#/definitions/v1RejectActivityIntent"
        },
        "createPrivateKeyTagIntent": {
          "$ref": "#/definitions/v1CreatePrivateKeyTagIntent"
        },
        "deletePrivateKeyTagsIntent": {
          "$ref": "#/definitions/v1DeletePrivateKeyTagsIntent"
        },
        "createPolicyIntentV2": {
          "$ref": "#/definitions/v1CreatePolicyIntentV2"
        },
        "setPaymentMethodIntent": {
          "$ref": "#/definitions/v1SetPaymentMethodIntent"
        },
        "activateBillingTierIntent": {
          "$ref": "#/definitions/v1ActivateBillingTierIntent"
        },
        "deletePaymentMethodIntent": {
          "$ref": "#/definitions/v1DeletePaymentMethodIntent"
        },
        "createPolicyIntentV3": {
          "$ref": "#/definitions/v1CreatePolicyIntentV3"
        },
        "createApiOnlyUsersIntent": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersIntent"
        },
        "updateRootQuorumIntent": {
          "$ref": "#/definitions/v1UpdateRootQuorumIntent"
        },
        "updateUserTagIntent": {
          "$ref": "#/definitions/v1UpdateUserTagIntent"
        },
        "updatePrivateKeyTagIntent": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagIntent"
        },
        "createAuthenticatorsIntentV2": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntentV2"
        },
        "acceptInvitationIntentV2": {
          "$ref": "#/definitions/v1AcceptInvitationIntentV2"
        },
        "createOrganizationIntentV2": {
          "$ref": "#/definitions/v1CreateOrganizationIntentV2"
        },
        "createUsersIntentV2": {
          "$ref": "#/definitions/v1CreateUsersIntentV2"
        },
        "createSubOrganizationIntent": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntent"
        },
        "createSubOrganizationIntentV2": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV2"
        }
      },
      "description": "Intent object crafted by Turnkey based on the user request, used to assess the permissibility of an action.",
      "required": ["createOrganizationIntent"]
    },
    "v1Invitation": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object."
        },
        "receiverUserName": {
          "type": "string",
          "description": "The name of the intended Invitation recipient."
        },
        "receiverEmail": {
          "type": "string",
          "description": "The email address of the intended Invitation recipient."
        },
        "receiverUserTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the Invitation recipient."
        },
        "accessType": {
          "$ref": "#/definitions/externaldatav1AccessType"
        },
        "status": {
          "$ref": "#/definitions/v1InvitationStatus"
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "senderUserId": {
          "type": "string",
          "description": "Unique identifier for the Sender of an Invitation."
        }
      },
      "required": [
        "invitationId",
        "receiverUserName",
        "receiverEmail",
        "receiverUserTags",
        "accessType",
        "status",
        "createdAt",
        "updatedAt",
        "senderUserId"
      ]
    },
    "v1InvitationParams": {
      "type": "object",
      "properties": {
        "receiverUserName": {
          "type": "string",
          "description": "The name of the intended Invitation recipient.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "receiverUserEmail": {
          "type": "string",
          "description": "The email address of the intended Invitation recipient.",
          "title": "@inject_tag: validate:\"required,email,tk_email\""
        },
        "receiverUserTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the Invitation recipient.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "accessType": {
          "$ref": "#/definitions/immutableactivityv1AccessType"
        },
        "senderUserId": {
          "type": "string",
          "description": "Unique identifier for the Sender of an Invitation.",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": [
        "receiverUserName",
        "receiverUserEmail",
        "receiverUserTags",
        "accessType",
        "senderUserId"
      ]
    },
    "v1InvitationStatus": {
      "type": "string",
      "enum": [
        "INVITATION_STATUS_CREATED",
        "INVITATION_STATUS_ACCEPTED",
        "INVITATION_STATUS_REVOKED"
      ]
    },
    "v1NOOPCodegenAnchorResponse": {
      "type": "object",
      "properties": {
        "stamp": {
          "$ref": "#/definitions/v1WebAuthnStamp"
        }
      },
      "required": ["stamp"]
    },
    "v1OrganizationData": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        },
        "privateKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PrivateKey"
          }
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Invitation"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/datav1Tag"
          }
        },
        "disabledPrivateKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PrivateKey"
          }
        },
        "rootQuorum": {
          "$ref": "#/definitions/v1Quorum"
        }
      },
      "description": "This proto definition is used in our external-facing APIs.\nIt's important to leverage annotations because they're used in our external interfaces."
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "A limit of the number of object to be returned, between 1 and 100. Defaults to 10 if omitted or set to 0."
        },
        "before": {
          "type": "string",
          "description": "A pagination cursor. This is an object ID that enables you to fetch all objects before this ID."
        },
        "after": {
          "type": "string",
          "description": "A pagination cursor. This is an object ID that enables you to fetch all objects after this ID."
        }
      }
    },
    "v1PayloadEncoding": {
      "type": "string",
      "enum": ["PAYLOAD_ENCODING_HEXADECIMAL", "PAYLOAD_ENCODING_TEXT_UTF8"],
      "title": "- PAYLOAD_ENCODING_UNSPECIFIED: Default value if payload encoding is not set explicitly\n - PAYLOAD_ENCODING_HEXADECIMAL: Payload is encoded in hexadecimal\nWe accept 0x-prefixed or non-0x prefixed payloads.\nWe accept any casing (uppercase, lowercase, or mixed)\n - PAYLOAD_ENCODING_TEXT_UTF8: Payload is encoded as utf-8 text\nWill be converted to bytes for signature with Rust's standard String.as_bytes()"
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        },
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "effect": {
          "$ref": "#/definitions/externaldatav1Effect"
        },
        "selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/externaldatav1Selector"
          },
          "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "notes": {
          "type": "string",
          "description": "Human-readable notes added by a User to describe a particular policy."
        },
        "consensus": {
          "type": "string",
          "description": "A consensus expression that evalutes to true or false."
        },
        "condition": {
          "type": "string",
          "description": "A condition expression that evalutes to true or false."
        }
      },
      "required": [
        "policyId",
        "policyName",
        "effect",
        "selectors",
        "createdAt",
        "updatedAt",
        "notes",
        "consensus",
        "condition"
      ]
    },
    "v1PrivateKey": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "privateKeyName": {
          "type": "string",
          "description": "Human-readable name for a Private Key."
        },
        "curve": {
          "$ref": "#/definitions/externaldatav1Curve"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/externaldatav1Address"
          },
          "description": "Derived cryptocurrency addresses for a given Private Key."
        },
        "privateKeyTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "required": [
        "privateKeyId",
        "publicKey",
        "privateKeyName",
        "curve",
        "addresses",
        "privateKeyTags",
        "createdAt"
      ]
    },
    "v1PrivateKeyParams": {
      "type": "object",
      "properties": {
        "privateKeyName": {
          "type": "string",
          "description": "Human-readable name for a Private Key.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "curve": {
          "$ref": "#/definitions/immutableactivityv1Curve"
        },
        "privateKeyTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "addressFormats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/immutableactivityv1AddressFormat"
          },
          "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
          "title": "@inject_tag: validate:\"dive\""
        }
      },
      "required": [
        "privateKeyName",
        "curve",
        "privateKeyTags",
        "addressFormats"
      ]
    },
    "v1PublicKeyCredentialWithAttestation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["public-key"],
          "title": "Must be literal string \"public-key\""
        },
        "rawId": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        },
        "response": {
          "$ref": "#/definitions/v1AuthenticatorAttestationResponse"
        },
        "clientExtensionResults": {
          "$ref": "#/definitions/v1SimpleClientExtensionResults"
        }
      },
      "required": ["id", "type", "rawId", "response", "clientExtensionResults"]
    },
    "v1Quorum": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "Count of unique approvals required to meet quorum."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifiers of quorum set members."
        }
      },
      "required": ["threshold", "userIds"]
    },
    "v1RejectActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action.",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["fingerprint"]
    },
    "v1RejectActivityRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REJECT_ACTIVITY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1RejectActivityIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1Result": {
      "type": "object",
      "properties": {
        "createOrganizationResult": {
          "$ref": "#/definitions/v1CreateOrganizationResult"
        },
        "createAuthenticatorsResult": {
          "$ref": "#/definitions/v1CreateAuthenticatorsResult"
        },
        "createUsersResult": {
          "$ref": "#/definitions/v1CreateUsersResult"
        },
        "createPrivateKeysResult": {
          "$ref": "#/definitions/v1CreatePrivateKeysResult"
        },
        "createInvitationsResult": {
          "$ref": "#/definitions/v1CreateInvitationsResult"
        },
        "acceptInvitationResult": {
          "$ref": "#/definitions/v1AcceptInvitationResult"
        },
        "signRawPayloadResult": {
          "$ref": "#/definitions/v1SignRawPayloadResult"
        },
        "createPolicyResult": {
          "$ref": "#/definitions/v1CreatePolicyResult"
        },
        "disablePrivateKeyResult": {
          "$ref": "#/definitions/v1DisablePrivateKeyResult"
        },
        "deleteUsersResult": {
          "$ref": "#/definitions/v1DeleteUsersResult"
        },
        "deleteAuthenticatorsResult": {
          "$ref": "#/definitions/v1DeleteAuthenticatorsResult"
        },
        "deleteInvitationResult": {
          "$ref": "#/definitions/v1DeleteInvitationResult"
        },
        "deleteOrganizationResult": {
          "$ref": "#/definitions/v1DeleteOrganizationResult"
        },
        "deletePolicyResult": {
          "$ref": "#/definitions/v1DeletePolicyResult"
        },
        "createUserTagResult": {
          "$ref": "#/definitions/v1CreateUserTagResult"
        },
        "deleteUserTagsResult": {
          "$ref": "#/definitions/v1DeleteUserTagsResult"
        },
        "signTransactionResult": {
          "$ref": "#/definitions/v1SignTransactionResult"
        },
        "deleteApiKeysResult": {
          "$ref": "#/definitions/v1DeleteApiKeysResult"
        },
        "createApiKeysResult": {
          "$ref": "#/definitions/v1CreateApiKeysResult"
        },
        "createPrivateKeyTagResult": {
          "$ref": "#/definitions/v1CreatePrivateKeyTagResult"
        },
        "deletePrivateKeyTagsResult": {
          "$ref": "#/definitions/v1DeletePrivateKeyTagsResult"
        },
        "setPaymentMethodResult": {
          "$ref": "#/definitions/v1SetPaymentMethodResult"
        },
        "activateBillingTierResult": {
          "$ref": "#/definitions/v1ActivateBillingTierResult"
        },
        "deletePaymentMethodResult": {
          "$ref": "#/definitions/v1DeletePaymentMethodResult"
        },
        "createApiOnlyUsersResult": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersResult"
        },
        "updateRootQuorumResult": {
          "$ref": "#/definitions/v1UpdateRootQuorumResult"
        },
        "updateUserTagResult": {
          "$ref": "#/definitions/v1UpdateUserTagResult"
        },
        "updatePrivateKeyTagResult": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagResult"
        },
        "createSubOrganizationResult": {
          "$ref": "#/definitions/v1CreateSubOrganizationResult"
        }
      },
      "description": "Result of the intended action."
    },
    "v1RootUserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address.",
          "title": "@inject_tag: validate:\"omitempty,email,tk_email\""
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKeyParams"
          },
          "description": "A list of API Key parameters.",
          "title": "@inject_tag: validate:\"dive\""
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters.",
          "title": "@inject_tag: validate:\"dive\""
        }
      },
      "required": ["userName", "apiKeys", "authenticators"]
    },
    "v1SelectorV2": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/immutableactivityv1Operator"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SetPaymentMethodIntent": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "description": "The account number of the customer's credit card.",
          "title": "@inject_tag: validate:\"required,max=16,numeric\""
        },
        "cvv": {
          "type": "string",
          "description": "The verification digits of the customer's credit card.",
          "title": "@inject_tag: validate:\"required,max=4,numeric\""
        },
        "expiryMonth": {
          "type": "string",
          "description": "The month that the credit card expires.",
          "title": "@inject_tag: validate:\"required,numeric,len=2\""
        },
        "expiryYear": {
          "type": "string",
          "description": "The year that the credit card expires.",
          "title": "@inject_tag: validate:\"required,numeric,len=4\""
        },
        "cardHolderEmail": {
          "type": "string",
          "description": "The email that will receive invoices for the credit card.",
          "title": "@inject_tag: validate:\"required,email,tk_email\""
        },
        "cardHolderName": {
          "type": "string",
          "description": "The name associated with the credit card.",
          "title": "@inject_tag: validate:\"required,tk_label_length\""
        }
      },
      "required": [
        "number",
        "cvv",
        "expiryMonth",
        "expiryYear",
        "cardHolderEmail",
        "cardHolderName"
      ]
    },
    "v1SetPaymentMethodResult": {
      "type": "object",
      "properties": {
        "lastFour": {
          "type": "string",
          "description": "The last four digits of the credit card added."
        },
        "cardHolderName": {
          "type": "string",
          "description": "The name associated with the payment method."
        },
        "cardHolderEmail": {
          "type": "string",
          "description": "The email address associated with the payment method."
        }
      },
      "required": ["lastFour", "cardHolderName", "cardHolderEmail"]
    },
    "v1SignRawPayloadIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "payload": {
          "type": "string",
          "description": "Raw unsigned payload to be signed.",
          "title": "@inject_tag: validate:\"required\""
        },
        "encoding": {
          "$ref": "#/definitions/v1PayloadEncoding"
        },
        "hashFunction": {
          "$ref": "#/definitions/v1HashFunction"
        }
      },
      "required": ["privateKeyId", "payload", "encoding", "hashFunction"]
    },
    "v1SignRawPayloadRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_RAW_PAYLOAD"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SignRawPayloadIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SignRawPayloadResult": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        },
        "s": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        },
        "v": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        }
      },
      "required": ["r", "s", "v"]
    },
    "v1SignTransactionIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key.",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "unsignedTransaction": {
          "type": "string",
          "description": "Raw unsigned transaction to be signed by a particular Private Key.",
          "title": "@inject_tag: validate:\"required\""
        },
        "type": {
          "$ref": "#/definitions/immutableactivityv1TransactionType"
        }
      },
      "required": ["privateKeyId", "unsignedTransaction", "type"]
    },
    "v1SignTransactionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_TRANSACTION"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SignTransactionIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SignTransactionResult": {
      "type": "object",
      "properties": {
        "signedTransaction": {
          "type": "string"
        }
      },
      "required": ["signedTransaction"]
    },
    "v1SimpleClientExtensionResults": {
      "type": "object",
      "properties": {
        "appid": {
          "type": "boolean"
        },
        "appidExclude": {
          "type": "boolean"
        },
        "credProps": {
          "$ref": "#/definitions/v1CredPropsAuthenticationExtensionsClientOutputs"
        }
      }
    },
    "v1TagType": {
      "type": "string",
      "enum": ["TAG_TYPE_USER", "TAG_TYPE_PRIVATE_KEY"]
    },
    "v1Timestamp": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string"
        },
        "nanos": {
          "type": "string"
        }
      },
      "required": ["seconds", "nanos"]
    },
    "v1UpdatePrivateKeyTagIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag.",
          "title": "@inject_tag: validate:\"uuid\""
        },
        "newPrivateKeyTagName": {
          "type": "string",
          "description": "The new, human-readable name for the tag with the given ID.",
          "title": "@inject_tag: validate:\"omitempty,tk_label,tk_label_length\""
        },
        "addPrivateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Keys IDs to add this tag to.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "removePrivateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs to remove this tag from.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["privateKeyTagId", "addPrivateKeyIds", "removePrivateKeyIds"]
    },
    "v1UpdatePrivateKeyTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdatePrivateKeyTagResult": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag."
        }
      },
      "required": ["privateKeyTagId"]
    },
    "v1UpdateRootQuorumIntent": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach quorum.",
          "title": "@inject_tag: validate:\"required\""
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The unique identifiers of users who comprise the quorum set.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["threshold", "userIds"]
    },
    "v1UpdateRootQuorumRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_ROOT_QUORUM"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdateRootQuorumIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdateRootQuorumResult": {
      "type": "object"
    },
    "v1UpdateUserTagIntent": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag.",
          "title": "@inject_tag: validate:\"uuid\""
        },
        "newUserTagName": {
          "type": "string",
          "description": "The new, human-readable name for the tag with the given ID.",
          "title": "@inject_tag: validate:\"omitempty,tk_label,tk_label_length\""
        },
        "addUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs to add this tag to.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "removeUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs to remove this tag from.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["userTagId", "addUserIds", "removeUserIds"]
    },
    "v1UpdateUserTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_USER_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdateUserTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdateUserTagResult": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag."
        }
      },
      "required": ["userTagId"]
    },
    "v1User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address.",
          "title": "some users do not have emails (programmatic users)"
        },
        "accessType": {
          "$ref": "#/definitions/externaldatav1AccessType"
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Authenticator"
          },
          "description": "A list of Authenticator parameters."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKey"
          },
          "description": "A list of API Key parameters."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "required": [
        "userId",
        "userName",
        "accessType",
        "authenticators",
        "apiKeys",
        "userTags",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1UserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address.",
          "title": "@inject_tag: validate:\"omitempty,email,tk_email\""
        },
        "accessType": {
          "$ref": "#/definitions/immutableactivityv1AccessType"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKeyParams"
          },
          "description": "A list of API Key parameters.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorParams"
          },
          "description": "A list of Authenticator parameters.",
          "title": "@inject_tag: validate:\"dive\""
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": [
        "userName",
        "accessType",
        "apiKeys",
        "authenticators",
        "userTags"
      ]
    },
    "v1UserParamsV2": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User.",
          "title": "@inject_tag: validate:\"required,tk_label_length,tk_label\""
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address.",
          "title": "@inject_tag: validate:\"omitempty,email,tk_email\""
        },
        "accessType": {
          "$ref": "#/definitions/immutableactivityv1AccessType"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiKeyParams"
          },
          "description": "A list of API Key parameters.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters.",
          "title": "@inject_tag: validate:\"dive\""
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs.",
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": [
        "userName",
        "accessType",
        "apiKeys",
        "authenticators",
        "userTags"
      ]
    },
    "v1Vote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for a given Vote object."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "activityId": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        },
        "selection": {
          "type": "string",
          "enum": ["VOTE_SELECTION_APPROVED", "VOTE_SELECTION_REJECTED"]
        },
        "message": {
          "type": "string",
          "description": "The raw message being signed within a Vote."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "signature": {
          "type": "string",
          "description": "The signature applied to a particular vote."
        },
        "scheme": {
          "type": "string",
          "description": "Method used to produce a signature."
        },
        "createdAt": {
          "$ref": "#/definitions/v1Timestamp"
        }
      },
      "description": "Object representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.",
      "required": [
        "id",
        "userId",
        "user",
        "activityId",
        "selection",
        "message",
        "publicKey",
        "signature",
        "scheme",
        "createdAt"
      ]
    },
    "v1WebAuthnStamp": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "description": "A base64 url encoded Unique identifier for a given credential."
        },
        "clientDataJson": {
          "type": "string",
          "description": "A base64 encoded payload containing metadata about the signing context and the challenge."
        },
        "authenticatorData": {
          "type": "string",
          "description": "A base64 encoded payload containing metadata about the authenticator."
        },
        "signature": {
          "type": "string",
          "description": "The base64 url encoded signature bytes contained within the WebAuthn assertion response."
        }
      },
      "title": "We expect this to be passed in as a JSON-encoded, then base64-encoded string within a X-Stamp-Webauthn header",
      "required": [
        "credentialId",
        "clientDataJson",
        "authenticatorData",
        "signature"
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Stamp",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-languages": ["curl", "javascript"]
  }
}
