// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Externaldatav1CredentialType externaldatav1 credential type
//
// swagger:model externaldatav1CredentialType
type Externaldatav1CredentialType string

func NewExternaldatav1CredentialType(value Externaldatav1CredentialType) *Externaldatav1CredentialType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Externaldatav1CredentialType.
func (m Externaldatav1CredentialType) Pointer() *Externaldatav1CredentialType {
	return &m
}

const (

	// Externaldatav1CredentialTypeCREDENTIALTYPEWEBAUTHNAUTHENTICATOR captures enum value "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR"
	Externaldatav1CredentialTypeCREDENTIALTYPEWEBAUTHNAUTHENTICATOR Externaldatav1CredentialType = "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR"

	// Externaldatav1CredentialTypeCREDENTIALTYPEAPIKEYP256 captures enum value "CREDENTIAL_TYPE_API_KEY_P256"
	Externaldatav1CredentialTypeCREDENTIALTYPEAPIKEYP256 Externaldatav1CredentialType = "CREDENTIAL_TYPE_API_KEY_P256"

	// Externaldatav1CredentialTypeCREDENTIALTYPERECOVERUSERKEYP256 captures enum value "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256"
	Externaldatav1CredentialTypeCREDENTIALTYPERECOVERUSERKEYP256 Externaldatav1CredentialType = "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256"
)

// for schema
var externaldatav1CredentialTypeEnum []interface{}

func init() {
	var res []Externaldatav1CredentialType
	if err := json.Unmarshal([]byte(`["CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR","CREDENTIAL_TYPE_API_KEY_P256","CREDENTIAL_TYPE_RECOVER_USER_KEY_P256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externaldatav1CredentialTypeEnum = append(externaldatav1CredentialTypeEnum, v)
	}
}

func (m Externaldatav1CredentialType) validateExternaldatav1CredentialTypeEnum(path, location string, value Externaldatav1CredentialType) error {
	if err := validate.EnumCase(path, location, value, externaldatav1CredentialTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this externaldatav1 credential type
func (m Externaldatav1CredentialType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExternaldatav1CredentialTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this externaldatav1 credential type based on context it is used
func (m Externaldatav1CredentialType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
