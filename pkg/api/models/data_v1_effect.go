// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataV1Effect data v1 effect
//
// swagger:model data.v1.Effect
type DataV1Effect string

func NewDataV1Effect(value DataV1Effect) *DataV1Effect {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataV1Effect.
func (m DataV1Effect) Pointer() *DataV1Effect {
	return &m
}

const (

	// EffectAllow captures enum value "EFFECT_ALLOW"
	EffectAllow DataV1Effect = "EFFECT_ALLOW"

	// EffectDeny captures enum value "EFFECT_DENY"
	EffectDeny DataV1Effect = "EFFECT_DENY"
)

// for schema
var DataV1EffectEnum []DataV1Effect

func init() {
	var res []DataV1Effect
	if err := json.Unmarshal([]byte(`["EFFECT_ALLOW","EFFECT_DENY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		DataV1EffectEnum = append(DataV1EffectEnum, v)
	}
}

func (m DataV1Effect) validateDataV1EffectEnum(path, location string, value DataV1Effect) error {
	if err := validate.EnumCase(path, location, value, DataV1EffectEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this data v1 effect
func (m DataV1Effect) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataV1EffectEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this data v1 effect based on context it is used
func (m DataV1Effect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
