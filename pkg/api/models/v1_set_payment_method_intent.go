// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SetPaymentMethodIntent v1 set payment method intent
//
// swagger:model v1SetPaymentMethodIntent
type V1SetPaymentMethodIntent struct {

	// The email that will receive invoices for the credit card.
	// Required: true
	CardHolderEmail *string `json:"cardHolderEmail"`

	// The name associated with the credit card.
	// Required: true
	CardHolderName *string `json:"cardHolderName"`

	// The verification digits of the customer's credit card.
	// Required: true
	Cvv *string `json:"cvv"`

	// The month that the credit card expires.
	// Required: true
	ExpiryMonth *string `json:"expiryMonth"`

	// The year that the credit card expires.
	// Required: true
	ExpiryYear *string `json:"expiryYear"`

	// The account number of the customer's credit card.
	// Required: true
	Number *string `json:"number"`
}

// Validate validates this v1 set payment method intent
func (m *V1SetPaymentMethodIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardHolderEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardHolderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SetPaymentMethodIntent) validateCardHolderEmail(formats strfmt.Registry) error {

	if err := validate.Required("cardHolderEmail", "body", m.CardHolderEmail); err != nil {
		return err
	}

	return nil
}

func (m *V1SetPaymentMethodIntent) validateCardHolderName(formats strfmt.Registry) error {

	if err := validate.Required("cardHolderName", "body", m.CardHolderName); err != nil {
		return err
	}

	return nil
}

func (m *V1SetPaymentMethodIntent) validateCvv(formats strfmt.Registry) error {

	if err := validate.Required("cvv", "body", m.Cvv); err != nil {
		return err
	}

	return nil
}

func (m *V1SetPaymentMethodIntent) validateExpiryMonth(formats strfmt.Registry) error {

	if err := validate.Required("expiryMonth", "body", m.ExpiryMonth); err != nil {
		return err
	}

	return nil
}

func (m *V1SetPaymentMethodIntent) validateExpiryYear(formats strfmt.Registry) error {

	if err := validate.Required("expiryYear", "body", m.ExpiryYear); err != nil {
		return err
	}

	return nil
}

func (m *V1SetPaymentMethodIntent) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 set payment method intent based on context it is used
func (m *V1SetPaymentMethodIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1SetPaymentMethodIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SetPaymentMethodIntent) UnmarshalBinary(b []byte) error {
	var res V1SetPaymentMethodIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
