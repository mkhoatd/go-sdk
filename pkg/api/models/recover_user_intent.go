// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverUserIntent recover user intent
//
// swagger:model RecoverUserIntent
type RecoverUserIntent struct {

	// The new authenticator to register.
	// Required: true
	Authenticator *AuthenticatorParamsV2 `json:"authenticator"`

	// Unique identifier for the user performing recovery.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this recover user intent
func (m *RecoverUserIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverUserIntent) validateAuthenticator(formats strfmt.Registry) error {

	if err := validate.Required("authenticator", "body", m.Authenticator); err != nil {
		return err
	}

	if m.Authenticator != nil {
		if err := m.Authenticator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authenticator")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverUserIntent) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recover user intent based on the context it is used
func (m *RecoverUserIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverUserIntent) contextValidateAuthenticator(ctx context.Context, formats strfmt.Registry) error {

	if m.Authenticator != nil {
		if err := m.Authenticator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authenticator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverUserIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverUserIntent) UnmarshalBinary(b []byte) error {
	var res RecoverUserIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
