// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Immutableactivityv1PayloadEncoding immutableactivityv1 payload encoding
//
// swagger:model immutableactivityv1PayloadEncoding
type Immutableactivityv1PayloadEncoding string

func NewImmutableactivityv1PayloadEncoding(value Immutableactivityv1PayloadEncoding) *Immutableactivityv1PayloadEncoding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Immutableactivityv1PayloadEncoding.
func (m Immutableactivityv1PayloadEncoding) Pointer() *Immutableactivityv1PayloadEncoding {
	return &m
}

const (

	// Immutableactivityv1PayloadEncodingPAYLOADENCODINGHEXADECIMAL captures enum value "PAYLOAD_ENCODING_HEXADECIMAL"
	Immutableactivityv1PayloadEncodingPAYLOADENCODINGHEXADECIMAL Immutableactivityv1PayloadEncoding = "PAYLOAD_ENCODING_HEXADECIMAL"

	// Immutableactivityv1PayloadEncodingPAYLOADENCODINGTEXTUTF8 captures enum value "PAYLOAD_ENCODING_TEXT_UTF8"
	Immutableactivityv1PayloadEncodingPAYLOADENCODINGTEXTUTF8 Immutableactivityv1PayloadEncoding = "PAYLOAD_ENCODING_TEXT_UTF8"
)

// for schema
var immutableactivityv1PayloadEncodingEnum []interface{}

func init() {
	var res []Immutableactivityv1PayloadEncoding
	if err := json.Unmarshal([]byte(`["PAYLOAD_ENCODING_HEXADECIMAL","PAYLOAD_ENCODING_TEXT_UTF8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		immutableactivityv1PayloadEncodingEnum = append(immutableactivityv1PayloadEncodingEnum, v)
	}
}

func (m Immutableactivityv1PayloadEncoding) validateImmutableactivityv1PayloadEncodingEnum(path, location string, value Immutableactivityv1PayloadEncoding) error {
	if err := validate.EnumCase(path, location, value, immutableactivityv1PayloadEncodingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this immutableactivityv1 payload encoding
func (m Immutableactivityv1PayloadEncoding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImmutableactivityv1PayloadEncodingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this immutableactivityv1 payload encoding based on context it is used
func (m Immutableactivityv1PayloadEncoding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
