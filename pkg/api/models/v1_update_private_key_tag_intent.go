// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1UpdatePrivateKeyTagIntent v1 update private key tag intent
//
// swagger:model v1UpdatePrivateKeyTagIntent
type V1UpdatePrivateKeyTagIntent struct {

	// @inject_tag: validate:"dive,uuid"
	//
	// A list of Private Keys IDs to add this tag to.
	// Required: true
	AddPrivateKeyIds []string `json:"addPrivateKeyIds"`

	// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
	//
	// The new, human-readable name for the tag with the given ID.
	NewPrivateKeyTagName string `json:"newPrivateKeyTagName,omitempty"`

	// @inject_tag: validate:"uuid"
	//
	// Unique identifier for a given Private Key Tag.
	// Required: true
	PrivateKeyTagID *string `json:"privateKeyTagId"`

	// @inject_tag: validate:"dive,uuid"
	//
	// A list of Private Key IDs to remove this tag from.
	// Required: true
	RemovePrivateKeyIds []string `json:"removePrivateKeyIds"`
}

// Validate validates this v1 update private key tag intent
func (m *V1UpdatePrivateKeyTagIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddPrivateKeyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyTagID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovePrivateKeyIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UpdatePrivateKeyTagIntent) validateAddPrivateKeyIds(formats strfmt.Registry) error {

	if err := validate.Required("addPrivateKeyIds", "body", m.AddPrivateKeyIds); err != nil {
		return err
	}

	return nil
}

func (m *V1UpdatePrivateKeyTagIntent) validatePrivateKeyTagID(formats strfmt.Registry) error {

	if err := validate.Required("privateKeyTagId", "body", m.PrivateKeyTagID); err != nil {
		return err
	}

	return nil
}

func (m *V1UpdatePrivateKeyTagIntent) validateRemovePrivateKeyIds(formats strfmt.Registry) error {

	if err := validate.Required("removePrivateKeyIds", "body", m.RemovePrivateKeyIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 update private key tag intent based on context it is used
func (m *V1UpdatePrivateKeyTagIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1UpdatePrivateKeyTagIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UpdatePrivateKeyTagIntent) UnmarshalBinary(b []byte) error {
	var res V1UpdatePrivateKeyTagIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
