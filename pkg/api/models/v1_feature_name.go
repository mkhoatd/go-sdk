// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1FeatureName v1 feature name
//
// swagger:model v1FeatureName
type V1FeatureName string

func NewV1FeatureName(value V1FeatureName) *V1FeatureName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1FeatureName.
func (m V1FeatureName) Pointer() *V1FeatureName {
	return &m
}

const (

	// V1FeatureNameFEATURENAMEROOTUSEREMAILRECOVERY captures enum value "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY"
	V1FeatureNameFEATURENAMEROOTUSEREMAILRECOVERY V1FeatureName = "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY"
)

// for schema
var v1FeatureNameEnum []interface{}

func init() {
	var res []V1FeatureName
	if err := json.Unmarshal([]byte(`["FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1FeatureNameEnum = append(v1FeatureNameEnum, v)
	}
}

func (m V1FeatureName) validateV1FeatureNameEnum(path, location string, value V1FeatureName) error {
	if err := validate.EnumCase(path, location, value, v1FeatureNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 feature name
func (m V1FeatureName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1FeatureNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 feature name based on context it is used
func (m V1FeatureName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
