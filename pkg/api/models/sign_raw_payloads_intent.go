// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignRawPayloadsIntent sign raw payloads intent
//
// swagger:model SignRawPayloadsIntent
type SignRawPayloadsIntent struct {

	// Encoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8).
	// Required: true
	Encoding *PayloadEncoding `json:"encoding"`

	// Hash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032.
	// Required: true
	HashFunction *HashFunction `json:"hashFunction"`

	// An array of raw unsigned payloads to be signed.
	// Required: true
	Payloads []string `json:"payloads"`

	// A Wallet account address, Private Key address, or Private Key identifier.
	// Required: true
	SignWith *string `json:"signWith"`
}

// Validate validates this sign raw payloads intent
func (m *SignRawPayloadsIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignRawPayloadsIntent) validateEncoding(formats strfmt.Registry) error {

	if err := validate.Required("encoding", "body", m.Encoding); err != nil {
		return err
	}

	if err := validate.Required("encoding", "body", m.Encoding); err != nil {
		return err
	}

	if m.Encoding != nil {
		if err := m.Encoding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encoding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encoding")
			}
			return err
		}
	}

	return nil
}

func (m *SignRawPayloadsIntent) validateHashFunction(formats strfmt.Registry) error {

	if err := validate.Required("hashFunction", "body", m.HashFunction); err != nil {
		return err
	}

	if err := validate.Required("hashFunction", "body", m.HashFunction); err != nil {
		return err
	}

	if m.HashFunction != nil {
		if err := m.HashFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hashFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hashFunction")
			}
			return err
		}
	}

	return nil
}

func (m *SignRawPayloadsIntent) validatePayloads(formats strfmt.Registry) error {

	if err := validate.Required("payloads", "body", m.Payloads); err != nil {
		return err
	}

	return nil
}

func (m *SignRawPayloadsIntent) validateSignWith(formats strfmt.Registry) error {

	if err := validate.Required("signWith", "body", m.SignWith); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sign raw payloads intent based on the context it is used
func (m *SignRawPayloadsIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncoding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHashFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignRawPayloadsIntent) contextValidateEncoding(ctx context.Context, formats strfmt.Registry) error {

	if m.Encoding != nil {

		if err := m.Encoding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encoding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encoding")
			}
			return err
		}
	}

	return nil
}

func (m *SignRawPayloadsIntent) contextValidateHashFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.HashFunction != nil {

		if err := m.HashFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hashFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hashFunction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignRawPayloadsIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignRawPayloadsIntent) UnmarshalBinary(b []byte) error {
	var res SignRawPayloadsIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
