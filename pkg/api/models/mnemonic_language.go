// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MnemonicLanguage mnemonic language
//
// swagger:model MnemonicLanguage
type MnemonicLanguage string

func NewMnemonicLanguage(value MnemonicLanguage) *MnemonicLanguage {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MnemonicLanguage.
func (m MnemonicLanguage) Pointer() *MnemonicLanguage {
	return &m
}

const (

	// MnemonicLanguageMNEMONICLANGUAGEENGLISH captures enum value "MNEMONIC_LANGUAGE_ENGLISH"
	MnemonicLanguageMNEMONICLANGUAGEENGLISH MnemonicLanguage = "MNEMONIC_LANGUAGE_ENGLISH"

	// MnemonicLanguageMNEMONICLANGUAGESIMPLIFIEDCHINESE captures enum value "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE"
	MnemonicLanguageMNEMONICLANGUAGESIMPLIFIEDCHINESE MnemonicLanguage = "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE"

	// MnemonicLanguageMNEMONICLANGUAGETRADITIONALCHINESE captures enum value "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE"
	MnemonicLanguageMNEMONICLANGUAGETRADITIONALCHINESE MnemonicLanguage = "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE"

	// MnemonicLanguageMNEMONICLANGUAGECZECH captures enum value "MNEMONIC_LANGUAGE_CZECH"
	MnemonicLanguageMNEMONICLANGUAGECZECH MnemonicLanguage = "MNEMONIC_LANGUAGE_CZECH"

	// MnemonicLanguageMNEMONICLANGUAGEFRENCH captures enum value "MNEMONIC_LANGUAGE_FRENCH"
	MnemonicLanguageMNEMONICLANGUAGEFRENCH MnemonicLanguage = "MNEMONIC_LANGUAGE_FRENCH"

	// MnemonicLanguageMNEMONICLANGUAGEITALIAN captures enum value "MNEMONIC_LANGUAGE_ITALIAN"
	MnemonicLanguageMNEMONICLANGUAGEITALIAN MnemonicLanguage = "MNEMONIC_LANGUAGE_ITALIAN"

	// MnemonicLanguageMNEMONICLANGUAGEJAPANESE captures enum value "MNEMONIC_LANGUAGE_JAPANESE"
	MnemonicLanguageMNEMONICLANGUAGEJAPANESE MnemonicLanguage = "MNEMONIC_LANGUAGE_JAPANESE"

	// MnemonicLanguageMNEMONICLANGUAGEKOREAN captures enum value "MNEMONIC_LANGUAGE_KOREAN"
	MnemonicLanguageMNEMONICLANGUAGEKOREAN MnemonicLanguage = "MNEMONIC_LANGUAGE_KOREAN"

	// MnemonicLanguageMNEMONICLANGUAGESPANISH captures enum value "MNEMONIC_LANGUAGE_SPANISH"
	MnemonicLanguageMNEMONICLANGUAGESPANISH MnemonicLanguage = "MNEMONIC_LANGUAGE_SPANISH"
)

// for schema
var mnemonicLanguageEnum []interface{}

func init() {
	var res []MnemonicLanguage
	if err := json.Unmarshal([]byte(`["MNEMONIC_LANGUAGE_ENGLISH","MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE","MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE","MNEMONIC_LANGUAGE_CZECH","MNEMONIC_LANGUAGE_FRENCH","MNEMONIC_LANGUAGE_ITALIAN","MNEMONIC_LANGUAGE_JAPANESE","MNEMONIC_LANGUAGE_KOREAN","MNEMONIC_LANGUAGE_SPANISH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mnemonicLanguageEnum = append(mnemonicLanguageEnum, v)
	}
}

func (m MnemonicLanguage) validateMnemonicLanguageEnum(path, location string, value MnemonicLanguage) error {
	if err := validate.EnumCase(path, location, value, mnemonicLanguageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this mnemonic language
func (m MnemonicLanguage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMnemonicLanguageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this mnemonic language based on context it is used
func (m MnemonicLanguage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
