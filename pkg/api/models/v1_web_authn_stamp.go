// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1WebAuthnStamp v1 web authn stamp
//
// swagger:model v1WebAuthnStamp
type V1WebAuthnStamp struct {

	// A base64 encoded payload containing metadata about the authenticator.
	// Required: true
	AuthenticatorData *string `json:"authenticatorData"`

	// A base64 encoded payload containing metadata about the signing context and the challenge.
	// Required: true
	ClientDataJSON *string `json:"clientDataJson"`

	// A base64 url encoded Unique identifier for a given credential.
	// Required: true
	CredentialID *string `json:"credentialId"`

	// The base64 url encoded signature bytes contained within the WebAuthn assertion response.
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this v1 web authn stamp
func (m *V1WebAuthnStamp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticatorData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientDataJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WebAuthnStamp) validateAuthenticatorData(formats strfmt.Registry) error {

	if err := validate.Required("authenticatorData", "body", m.AuthenticatorData); err != nil {
		return err
	}

	return nil
}

func (m *V1WebAuthnStamp) validateClientDataJSON(formats strfmt.Registry) error {

	if err := validate.Required("clientDataJson", "body", m.ClientDataJSON); err != nil {
		return err
	}

	return nil
}

func (m *V1WebAuthnStamp) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credentialId", "body", m.CredentialID); err != nil {
		return err
	}

	return nil
}

func (m *V1WebAuthnStamp) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 web authn stamp based on context it is used
func (m *V1WebAuthnStamp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1WebAuthnStamp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WebAuthnStamp) UnmarshalBinary(b []byte) error {
	var res V1WebAuthnStamp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
