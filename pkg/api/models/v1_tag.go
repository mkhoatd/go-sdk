// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Tag v1 tag
//
// swagger:model v1.Tag
type V1Tag struct {

	// created at
	// Required: true
	CreatedAt *ExternalDataV1Timestamp `json:"createdAt"`

	// Unique identifier for a given Tag.
	// Required: true
	TagID *string `json:"tagId"`

	// Human-readable name for a Tag.
	// Required: true
	TagName *string `json:"tagName"`

	// tag type
	// Required: true
	TagType *TagType `json:"tagType"`

	// updated at
	// Required: true
	UpdatedAt *ExternalDataV1Timestamp `json:"updatedAt"`
}

// Validate validates this v1 tag
func (m *V1Tag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Tag) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1Tag) validateTagID(formats strfmt.Registry) error {

	if err := validate.Required("tagId", "body", m.TagID); err != nil {
		return err
	}

	return nil
}

func (m *V1Tag) validateTagName(formats strfmt.Registry) error {

	if err := validate.Required("tagName", "body", m.TagName); err != nil {
		return err
	}

	return nil
}

func (m *V1Tag) validateTagType(formats strfmt.Registry) error {

	if err := validate.Required("tagType", "body", m.TagType); err != nil {
		return err
	}

	if err := validate.Required("tagType", "body", m.TagType); err != nil {
		return err
	}

	if m.TagType != nil {
		if err := m.TagType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tagType")
			}
			return err
		}
	}

	return nil
}

func (m *V1Tag) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 tag based on the context it is used
func (m *V1Tag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Tag) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1Tag) contextValidateTagType(ctx context.Context, formats strfmt.Registry) error {

	if m.TagType != nil {

		if err := m.TagType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tagType")
			}
			return err
		}
	}

	return nil
}

func (m *V1Tag) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedAt != nil {

		if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Tag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Tag) UnmarshalBinary(b []byte) error {
	var res V1Tag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
