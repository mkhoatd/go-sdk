// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1MnemonicLanguage v1 mnemonic language
//
// swagger:model v1MnemonicLanguage
type V1MnemonicLanguage string

func NewV1MnemonicLanguage(value V1MnemonicLanguage) *V1MnemonicLanguage {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1MnemonicLanguage.
func (m V1MnemonicLanguage) Pointer() *V1MnemonicLanguage {
	return &m
}

const (

	// V1MnemonicLanguageMNEMONICLANGUAGEENGLISH captures enum value "MNEMONIC_LANGUAGE_ENGLISH"
	V1MnemonicLanguageMNEMONICLANGUAGEENGLISH V1MnemonicLanguage = "MNEMONIC_LANGUAGE_ENGLISH"

	// V1MnemonicLanguageMNEMONICLANGUAGESIMPLIFIEDCHINESE captures enum value "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE"
	V1MnemonicLanguageMNEMONICLANGUAGESIMPLIFIEDCHINESE V1MnemonicLanguage = "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE"

	// V1MnemonicLanguageMNEMONICLANGUAGETRADITIONALCHINESE captures enum value "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE"
	V1MnemonicLanguageMNEMONICLANGUAGETRADITIONALCHINESE V1MnemonicLanguage = "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE"

	// V1MnemonicLanguageMNEMONICLANGUAGECZECH captures enum value "MNEMONIC_LANGUAGE_CZECH"
	V1MnemonicLanguageMNEMONICLANGUAGECZECH V1MnemonicLanguage = "MNEMONIC_LANGUAGE_CZECH"

	// V1MnemonicLanguageMNEMONICLANGUAGEFRENCH captures enum value "MNEMONIC_LANGUAGE_FRENCH"
	V1MnemonicLanguageMNEMONICLANGUAGEFRENCH V1MnemonicLanguage = "MNEMONIC_LANGUAGE_FRENCH"

	// V1MnemonicLanguageMNEMONICLANGUAGEITALIAN captures enum value "MNEMONIC_LANGUAGE_ITALIAN"
	V1MnemonicLanguageMNEMONICLANGUAGEITALIAN V1MnemonicLanguage = "MNEMONIC_LANGUAGE_ITALIAN"

	// V1MnemonicLanguageMNEMONICLANGUAGEJAPANESE captures enum value "MNEMONIC_LANGUAGE_JAPANESE"
	V1MnemonicLanguageMNEMONICLANGUAGEJAPANESE V1MnemonicLanguage = "MNEMONIC_LANGUAGE_JAPANESE"

	// V1MnemonicLanguageMNEMONICLANGUAGEKOREAN captures enum value "MNEMONIC_LANGUAGE_KOREAN"
	V1MnemonicLanguageMNEMONICLANGUAGEKOREAN V1MnemonicLanguage = "MNEMONIC_LANGUAGE_KOREAN"

	// V1MnemonicLanguageMNEMONICLANGUAGESPANISH captures enum value "MNEMONIC_LANGUAGE_SPANISH"
	V1MnemonicLanguageMNEMONICLANGUAGESPANISH V1MnemonicLanguage = "MNEMONIC_LANGUAGE_SPANISH"
)

// for schema
var v1MnemonicLanguageEnum []interface{}

func init() {
	var res []V1MnemonicLanguage
	if err := json.Unmarshal([]byte(`["MNEMONIC_LANGUAGE_ENGLISH","MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE","MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE","MNEMONIC_LANGUAGE_CZECH","MNEMONIC_LANGUAGE_FRENCH","MNEMONIC_LANGUAGE_ITALIAN","MNEMONIC_LANGUAGE_JAPANESE","MNEMONIC_LANGUAGE_KOREAN","MNEMONIC_LANGUAGE_SPANISH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1MnemonicLanguageEnum = append(v1MnemonicLanguageEnum, v)
	}
}

func (m V1MnemonicLanguage) validateV1MnemonicLanguageEnum(path, location string, value V1MnemonicLanguage) error {
	if err := validate.EnumCase(path, location, value, v1MnemonicLanguageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 mnemonic language
func (m V1MnemonicLanguage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1MnemonicLanguageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 mnemonic language based on context it is used
func (m V1MnemonicLanguage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
