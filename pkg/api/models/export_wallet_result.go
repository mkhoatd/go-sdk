// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExportWalletResult export wallet result
//
// swagger:model ExportWalletResult
type ExportWalletResult struct {

	// Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
	// Required: true
	ExportBundle *string `json:"exportBundle"`

	// Unique identifier for a given Wallet.
	// Required: true
	WalletID *string `json:"walletId"`
}

// Validate validates this export wallet result
func (m *ExportWalletResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExportBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportWalletResult) validateExportBundle(formats strfmt.Registry) error {

	if err := validate.Required("exportBundle", "body", m.ExportBundle); err != nil {
		return err
	}

	return nil
}

func (m *ExportWalletResult) validateWalletID(formats strfmt.Registry) error {

	if err := validate.Required("walletId", "body", m.WalletID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this export wallet result based on context it is used
func (m *ExportWalletResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExportWalletResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExportWalletResult) UnmarshalBinary(b []byte) error {
	var res ExportWalletResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
