// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PathFormat v1 path format
//
// swagger:model v1PathFormat
type V1PathFormat string

func NewV1PathFormat(value V1PathFormat) *V1PathFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1PathFormat.
func (m V1PathFormat) Pointer() *V1PathFormat {
	return &m
}

const (

	// V1PathFormatPATHFORMATBIP32 captures enum value "PATH_FORMAT_BIP32"
	V1PathFormatPATHFORMATBIP32 V1PathFormat = "PATH_FORMAT_BIP32"
)

// for schema
var v1PathFormatEnum []interface{}

func init() {
	var res []V1PathFormat
	if err := json.Unmarshal([]byte(`["PATH_FORMAT_BIP32"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PathFormatEnum = append(v1PathFormatEnum, v)
	}
}

func (m V1PathFormat) validateV1PathFormatEnum(path, location string, value V1PathFormat) error {
	if err := validate.EnumCase(path, location, value, v1PathFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 path format
func (m V1PathFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PathFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 path format based on context it is used
func (m V1PathFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
