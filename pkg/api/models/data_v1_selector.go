// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataV1Selector data v1 selector
//
// swagger:model data.v1.Selector
type DataV1Selector struct {

	// Logical operators like OPERATOR_CONTAINS or OPERATOR_EQUAL.
	// Required: true
	Operator *DataV1Operator `json:"operator"`

	// The resource being referenced within a policy (e.g., user.tags or activities.type).
	// Required: true
	Subject *string `json:"subject"`

	// The specific parameter from the subject being referenced, like a specific user ID.
	// Required: true
	Targets []string `json:"targets"`
}

// Validate validates this data v1 selector
func (m *DataV1Selector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1Selector) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	if m.Operator != nil {
		if err := m.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

func (m *DataV1Selector) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *DataV1Selector) validateTargets(formats strfmt.Registry) error {

	if err := validate.Required("targets", "body", m.Targets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data v1 selector based on the context it is used
func (m *DataV1Selector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1Selector) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.Operator != nil {

		if err := m.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataV1Selector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataV1Selector) UnmarshalBinary(b []byte) error {
	var res DataV1Selector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
