// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AddressFormat address format
//
// swagger:model AddressFormat
type AddressFormat string

func NewAddressFormat(value AddressFormat) *AddressFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AddressFormat.
func (m AddressFormat) Pointer() *AddressFormat {
	return &m
}

const (

	// AddressFormatUncompressed captures enum value "ADDRESS_FORMAT_UNCOMPRESSED"
	AddressFormatUncompressed AddressFormat = "ADDRESS_FORMAT_UNCOMPRESSED"

	// AddressFormatCompressed captures enum value "ADDRESS_FORMAT_COMPRESSED"
	AddressFormatCompressed AddressFormat = "ADDRESS_FORMAT_COMPRESSED"

	// AddressFormatEthereum captures enum value "ADDRESS_FORMAT_ETHEREUM"
	AddressFormatEthereum AddressFormat = "ADDRESS_FORMAT_ETHEREUM"

	// AddressFormatSolana captures enum value "ADDRESS_FORMAT_SOLANA"
	AddressFormatSolana AddressFormat = "ADDRESS_FORMAT_SOLANA"

	// AddressFormatCosmos captures enum value "ADDRESS_FORMAT_COSMOS"
	AddressFormatCosmos AddressFormat = "ADDRESS_FORMAT_COSMOS"

	// AddressFormatTron captures enum value "ADDRESS_FORMAT_TRON"
	AddressFormatTron AddressFormat = "ADDRESS_FORMAT_TRON"
)

// for schema
var AddressFormatEnum []AddressFormat

func init() {
	var res []AddressFormat
	if err := json.Unmarshal([]byte(`["ADDRESS_FORMAT_UNCOMPRESSED","ADDRESS_FORMAT_COMPRESSED","ADDRESS_FORMAT_ETHEREUM","ADDRESS_FORMAT_SOLANA","ADDRESS_FORMAT_COSMOS","ADDRESS_FORMAT_TRON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		AddressFormatEnum = append(AddressFormatEnum, v)
	}
}

func (m AddressFormat) validateAddressFormatEnum(path, location string, value AddressFormat) error {
	if err := validate.EnumCase(path, location, value, AddressFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this address format
func (m AddressFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAddressFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this address format based on context it is used
func (m AddressFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
